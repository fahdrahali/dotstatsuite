# Note in Kubernetes wait4sql image, wait-tool volume and entrypoint override is not needed. This is just to overcome docker-compose
# limitation when dependent services start immediately, not waiting till sql database is fully ready.

version: "3"
services:

    nsiws-reset:
        image: siscc/sdmxri-nsi-maapi:latest
        ports:
          - "${NSI_RESET_PORT}:80"
        environment:
            # Authentication configuration
            auth__enabled: ${AUTH_ENABLED}
            auth__allowAnonymous: "true"
            auth__authority: http://keycloak:8080/auth/realms/siscc
            auth__clientId: stat-suite
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            auth__showPii: "false"
            # Authorization configuration
            authorization__enabled: ${AUTH_ENABLED}
            mappingStore__Id__Default: "reset" #Dataspace id
            DotStatSuiteCoreCommonDbConnectionString: Server=db;Database=${COMMON_DB};User=${COMMON_DB_USER};Password=${COMMON_DB_PWD};
            # Database configuration
            SQL_SERVER: db
            SQL_DATABASE: ${STRUCT_DB_RESET}
            SQL_USER: ${STRUCT_DB_RESET_USER}
            SQL_PASSWORD: ${STRUCT_DB_RESET_PWD}
            # MAAPI.NET configuration
            MA_SQL_USER: sa
            MA_SQL_PASSWORD: ${SA_PASSWORD}
            MA_ALWAYS_RESET: Y
            # Other NSI WS configuration
            INSERT_NEW_ITEM_SCHEME_VALUES: "false"
            SENDER_ID: "Reset - DotStat v8"
            enableReleaseManagement: "true"
        depends_on:
          - auth-service
          - dbup-struct-reset
        volumes:
          - "./logs:/app/logs"
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db '${STRUCT_DB_RESET_USER}' '${STRUCT_DB_RESET_PWD}' '${STRUCT_DB_RESET}' && ./entrypoint.sh"

    nsiws-stable:
        image: siscc/sdmxri-nsi-maapi:latest
        container_name: nsiws-stable
        ports:
          - "${NSI_STABLE_PORT}:80"
        environment:
            # Authentication configuration
            auth__enabled: ${AUTH_ENABLED}
            auth__allowAnonymous: "true"
            auth__authority: http://keycloak:8080/auth/realms/siscc
            auth__clientId: stat-suite
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            auth__showPii: "false"
            # Authorization configuration
            authorization__enabled: ${AUTH_ENABLED}
            mappingStore__Id__Default: "stable" #Dataspace id
            DotStatSuiteCoreCommonDbConnectionString: Server=db;Database=${COMMON_DB};User=${COMMON_DB_USER};Password=${COMMON_DB_PWD};
            # Database configuration
            SQL_SERVER: db
            SQL_DATABASE: ${STRUCT_DB_STABLE}
            SQL_USER: ${STRUCT_DB_STABLE_USER}
            SQL_PASSWORD: ${STRUCT_DB_STABLE_PWD}
            # MAAPI.NET configuration
            MA_SQL_USER: sa
            MA_SQL_PASSWORD: ${SA_PASSWORD}
            MA_ALWAYS_RESET: N
            # Other NSI WS configuration
            INSERT_NEW_ITEM_SCHEME_VALUES: "false"
            SENDER_ID: "Stable - DotStat v8"
            enableReleaseManagement: "true"
        depends_on:
          - auth-service
          - dbup-struct-stable
        volumes:
          - "./logs:/app/logs"
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db '${STRUCT_DB_STABLE_USER}' '${STRUCT_DB_STABLE_PWD}' '${STRUCT_DB_STABLE}' && ./entrypoint.sh"

    transfer-service:
        image: siscc/dotstatsuite-core-transfer
        container_name: transfer-service
        environment:
            auth__Enabled: ${AUTH_ENABLED}
            auth__authority: http://keycloak:8080/auth/realms/siscc
            auth__clientId: stat-suite
            auth__authorizationUrl: http://${KEYCLOAK_HOST}:${KEYCLOAK_HTTP_PORT}/auth/realms/siscc/protocol/openid-connect/auth
            auth__scopes__0: openid
            auth__scopes__1: profile
            auth__scopes__2: email
            auth__claimsMapping__email: email
            auth__claimsMapping__groups: groups
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            MaxTransferErrorAmount: 0
            DefaultLanguageCode: en
            SmtpHost: ${SMTP_HOST}
            SmtpPort: ${SMTP_PORT}
            SmtpEnableSsl: ${SMTP_SSL}
            SmtpUserName: ${SMTP_USER}
            SmtpUserPassword: ${SMTP_PASSWORD}
            MailFrom: noreply@dlm.org
            MaxTextAttributeLength: 150
            DotStatSuiteCoreCommonDbConnectionString: Server=db;Database=${COMMON_DB};User=${COMMON_DB_USER};Password=${COMMON_DB_PWD};
            SpacesInternal__0__Id: reset
            SpacesInternal__0__DotStatSuiteCoreStructDbConnectionString: Server=db;Database=${STRUCT_DB_RESET};User=${STRUCT_DB_RESET_USER};Password=${STRUCT_DB_RESET_PWD};
            SpacesInternal__0__DotStatSuiteCoreDataDbConnectionString: Server=db;Database=${DATA_DB_RESET};User=${DATA_DB_RESET_USER};Password=${DATA_DB_RESET_PWD};
            SpacesInternal__0__DataImportTimeOutInMinutes: 2
            SpacesInternal__0__DatabaseCommandTimeoutInSec: 60
            SpacesInternal__0__AutoLog2DB: "true"
            SpacesInternal__0__AutoLog2DBLogLevel: "Notice"
            SpacesInternal__1__Id: stable
            SpacesInternal__1__DotStatSuiteCoreStructDbConnectionString: Server=db;Database=${STRUCT_DB_STABLE};User=${STRUCT_DB_STABLE_USER};Password=${STRUCT_DB_STABLE_PWD};
            SpacesInternal__1__DotStatSuiteCoreDataDbConnectionString: Server=db;Database=${DATA_DB_STABLE};User=${DATA_DB_STABLE_USER};Password=${DATA_DB_STABLE_PWD};
            SpacesInternal__1__DataImportTimeOutInMinutes: 2
            SpacesInternal__1__DatabaseCommandTimeoutInSec: 60
            SpacesInternal__1__AutoLog2DB: "true"
            SpacesInternal__1__AutoLog2DBLogLevel: "Notice"
        volumes:
          - "./logs:/app/logs"
        ports:
          - "${TRANSFER_PORT}:80"
        depends_on:
          - auth-service
          - dbup-data-reset
          - dbup-struct-reset
          - dbup-data-stable
          - dbup-struct-stable

    auth-service:
        image: siscc/dotstatsuite-core-auth-management
        container_name: auth-service
        environment:
            auth__enabled: ${AUTH_ENABLED}
            auth__authority: http://keycloak:8080/auth/realms/siscc
            auth__clientId: stat-suite
            auth__authorizationUrl: http://${KEYCLOAK_HOST}:${KEYCLOAK_HTTP_PORT}/auth/realms/siscc/protocol/openid-connect/auth
            auth__scopes__0: openid
            auth__scopes__1: profile
            auth__scopes__2: email
            auth__claimsMapping__email: email
            auth__claimsMapping__groups: groups
            auth__requireHttps: "false"
            auth__validateIssuer: "false"
            DotStatSuiteCoreCommonDbConnectionString: Server=db;Database=${COMMON_DB};User=${COMMON_DB_USER};Password=${COMMON_DB_PWD};
        volumes:
          - "./logs:/app/logs"
        ports:
          - "${AUTH_PORT}:80"
        depends_on:
          - dbup-common

    dbup-struct-reset:
        image: siscc/dotstatsuite-dbup
        container_name: dbup-struct-reset
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=db;Database=${STRUCT_DB_RESET};User=sa;Password=${SA_PASSWORD}; --mappingStoreDb --loginName ${STRUCT_DB_RESET_USER} --loginPwd ${STRUCT_DB_RESET_PWD} --force --dropDb
        depends_on:
          - db
        volumes:
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db sa ${SA_PASSWORD} && dotnet DotStat.DbUp.dll $$EXECUTION_PARAMETERS"

    dbup-data-reset:
        image: siscc/dotstatsuite-dbup
        container_name: dbup-data-reset
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=db;Database=${DATA_DB_RESET};User=sa;Password=${SA_PASSWORD}; --dataDb --loginName ${DATA_DB_RESET_USER} --loginPwd ${DATA_DB_RESET_PWD} --force --dropDb
        depends_on:
          - db
        volumes:
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db sa ${SA_PASSWORD} && dotnet DotStat.DbUp.dll $$EXECUTION_PARAMETERS"

    dbup-struct-stable:
        image: siscc/dotstatsuite-dbup
        container_name: dbup-struct-stable
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=db;Database=${STRUCT_DB_STABLE};User=sa;Password=${SA_PASSWORD}; --mappingStoreDb --loginName ${STRUCT_DB_STABLE_USER} --loginPwd ${STRUCT_DB_STABLE_PWD} --force
        depends_on:
          - db
        volumes:
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db sa ${SA_PASSWORD} && dotnet DotStat.DbUp.dll $$EXECUTION_PARAMETERS"

    dbup-data-stable:
        image: siscc/dotstatsuite-dbup
        container_name: dbup-data-stable
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=db;Database=${DATA_DB_STABLE};User=sa;Password=${SA_PASSWORD}; --dataDb --loginName ${DATA_DB_STABLE_USER} --loginPwd ${DATA_DB_STABLE_PWD} --force
        depends_on:
          - db
        volumes:
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db sa ${SA_PASSWORD} && dotnet DotStat.DbUp.dll $$EXECUTION_PARAMETERS"

    dbup-common:
        image: siscc/dotstatsuite-dbup
        container_name: dbup-common
        depends_on:
          - db
        environment:
            EXECUTION_PARAMETERS: upgrade --connectionString Server=db;Database=${COMMON_DB};User=sa;Password=${SA_PASSWORD}; --commonDb --loginName ${COMMON_DB_USER} --loginPwd ${COMMON_DB_PWD} --force
        volumes:
          - wait-tool:/tool
        entrypoint: bash -c "/tool/wait4sql db sa ${SA_PASSWORD} && dotnet DotStat.DbUp.dll $$EXECUTION_PARAMETERS"

    db:
        image: mcr.microsoft.com/mssql/server:2017-latest-ubuntu
        container_name: mssql
        ports:
          - "${SQL_PORT}:1433"
        environment:
          - SA_PASSWORD=${SA_PASSWORD}
          - MSSQL_PID=Developer
          - ACCEPT_EULA=Y
        depends_on:
          - wait
        volumes:
          - "db-data:/var/opt/mssql/data"

    wait:
      image: vigurous/wait4sql
      container_name: wait4sql
      volumes:
        - wait-tool:/tool

volumes:
  db-data:
  wait-tool: